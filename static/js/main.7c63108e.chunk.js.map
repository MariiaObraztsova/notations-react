{"version":3,"sources":["api/api.ts","components/NotionsList/NotionsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getAllNotions","method","NotionsList","notions","map","notion","title","body","id","App","useState","setNotions","useEffect","loadNotions","notionsFromServer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAEMA,EAAU,0CAEVC,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,+EAEWC,MAAMH,EAAKC,GAFtB,WAENG,EAFM,QAIEC,GAJF,sBAKJ,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aALvC,uBAQCJ,EAASK,OARV,gFAUN,IAAIH,MAAJ,qCAVM,0DAAH,wDAcAI,EAAa,uCAAG,sBAAAR,EAAA,+EACpBH,EAAQD,EAAS,CACtBa,OAAQ,SAFiB,2CAAH,qD,qBCXbC,EAA+B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7C,OACE,+BACE,8CAGCA,EAAQC,KAAI,SAAAC,GAAM,OACjB,+BACE,6BACGA,EAAOC,QAETD,EAAOE,OAJDF,EAAOG,WCgCTC,EAtCO,WACpB,MAAgCC,mBAAmB,IAAnD,mBAAQP,EAAR,KAAiBQ,EAAjB,KAWA,OATAC,qBAAU,WACR,IAAMC,EAAW,uCAAG,4BAAArB,EAAA,sEACcQ,IADd,OACZc,EADY,OAGlBH,EAAWG,GAHO,2CAAH,qDAMjBD,OAGA,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,qBAAKA,UAAU,gBAKjB,uBAAMA,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAaZ,QAASA,MAGxB,qBAAKY,UAAU,wBCnBRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c63108e.chunk.js","sourcesContent":["import { Options, NewNotion } from \"../types\";\n\nconst API_URL = 'https://mate.academy/students-api/posts';\n\nconst request = async (url: string, options: Options) => {\n  try {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\nexport const getAllNotions = async () => {\n  return request(API_URL, {\n    method: 'GET'\n  });\n};\n\nexport const createNotion = async (notionBody: NewNotion) => {\n  return request(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(notionBody),\n  });\n};\n\nexport const deleteNotion = async (notionId: number) => {\n  return request(`${API_URL}/${notionId}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\nimport { Notion } from '../../types';\n\ntype Props = {\n  notions: Notion[],\n}\n\nexport const NotionsList: React.FC<Props> = ({ notions }) => {\n  return (\n    <ul>\n      <h1>\n        Notions list\n      </h1>\n      {notions.map(notion => (\n        <li key={notion.id}>\n          <h2>\n            {notion.title}\n          </h2>\n          {notion.body}\n        </li>\n      ))}\n    </ul>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { getAllNotions } from './api/api';\nimport './App.css';\nimport './generalStyles.css';\nimport { Notion } from './types';\n\nimport { NotionsList } from './components/NotionsList/NotionsList';\n\nconst App: React.FC = () => {\n  const [ notions, setNotions ] = useState<Notion[]>([]);\n\n  useEffect(() => {\n    const loadNotions = async () => {\n      const notionsFromServer = await getAllNotions();\n\n      setNotions(notionsFromServer);\n    };\n\n    loadNotions();\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <div className=\"App__form\">\n          {/* <NewNotionForm /> */}\n        </div>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <NotionsList notions={notions} />\n        </div>\n\n        <div className=\"App__content\">\n          {/* {selectedNotionId > 0 && (\n            <MovieDetails\n              notionId={selectedNotionId}\n              notions={notions}\n            />\n          )} */}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}